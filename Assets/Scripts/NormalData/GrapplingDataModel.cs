using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[System.Serializable]
[RealtimeModel]
public partial class GrapplingDataModel
{
    [RealtimeProperty(1, true, true)]
    public Vector3 _hookPosition;
    [RealtimeProperty(2, true, true)]
    public bool _hookExtended;

}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class GrapplingDataModel : RealtimeModel {
    public UnityEngine.Vector3 hookPosition {
        get {
            return _hookPositionProperty.value;
        }
        set {
            if (_hookPositionProperty.value == value) return;
            _hookPositionProperty.value = value;
            InvalidateReliableLength();
            FireHookPositionDidChange(value);
        }
    }
    
    public bool hookExtended {
        get {
            return _hookExtendedProperty.value;
        }
        set {
            if (_hookExtendedProperty.value == value) return;
            _hookExtendedProperty.value = value;
            InvalidateReliableLength();
            FireHookExtendedDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(GrapplingDataModel model, T value);
    public event PropertyChangedHandler<UnityEngine.Vector3> hookPositionDidChange;
    public event PropertyChangedHandler<bool> hookExtendedDidChange;
    
    public enum PropertyID : uint {
        HookPosition = 1,
        HookExtended = 2,
    }
    
    #region Properties
    
    private ReliableProperty<UnityEngine.Vector3> _hookPositionProperty;
    
    private ReliableProperty<bool> _hookExtendedProperty;
    
    #endregion
    
    public GrapplingDataModel() : base(null) {
        _hookPositionProperty = new ReliableProperty<UnityEngine.Vector3>(1, _hookPosition);
        _hookExtendedProperty = new ReliableProperty<bool>(2, _hookExtended);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _hookPositionProperty.UnsubscribeCallback();
        _hookExtendedProperty.UnsubscribeCallback();
    }
    
    private void FireHookPositionDidChange(UnityEngine.Vector3 value) {
        try {
            hookPositionDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHookExtendedDidChange(bool value) {
        try {
            hookExtendedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _hookPositionProperty.WriteLength(context);
        length += _hookExtendedProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _hookPositionProperty.Write(stream, context);
        writes |= _hookExtendedProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.HookPosition: {
                    changed = _hookPositionProperty.Read(stream, context);
                    if (changed) FireHookPositionDidChange(hookPosition);
                    break;
                }
                case (uint) PropertyID.HookExtended: {
                    changed = _hookExtendedProperty.Read(stream, context);
                    if (changed) FireHookExtendedDidChange(hookExtended);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _hookPosition = hookPosition;
        _hookExtended = hookExtended;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
