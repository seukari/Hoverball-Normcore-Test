using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel(true)]
public partial class PlayerDataModel
{
    [RealtimeProperty(1,true,true)]
    private string _name;
    [RealtimeProperty(2, true, true)]
    private Color _colour;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerDataModel : RealtimeModel {
    public string name {
        get {
            return _nameProperty.value;
        }
        set {
            if (_nameProperty.value == value) return;
            _nameProperty.value = value;
            InvalidateReliableLength();
            FireNameDidChange(value);
        }
    }
    
    public string colour {
        get {
            return _colourProperty.value;
        }
        set {
            if (_colourProperty.value == value) return;
            _colourProperty.value = value;
            InvalidateReliableLength();
            FireColourDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(PlayerDataModel model, T value);
    public event PropertyChangedHandler<string> nameDidChange;
    public event PropertyChangedHandler<string> colourDidChange;
    
    public enum PropertyID : uint {
        Name = 1,
        Colour = 2,
    }
    
    #region Properties
    
    private ReliableProperty<string> _nameProperty;
    
    private ReliableProperty<string> _colourProperty;
    
    #endregion
    
    public PlayerDataModel() : base(new MetaModel()) {
        _nameProperty = new ReliableProperty<string>(1, _name);
        _colourProperty = new ReliableProperty<string>(2, ColorUtility.ToHtmlStringRGBA(_colour));
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _nameProperty.UnsubscribeCallback();
        _colourProperty.UnsubscribeCallback();
    }
    
    private void FireNameDidChange(string value) {
        try {
            nameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireColourDidChange(string value) {
        try {
            colourDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = MetaModelWriteLength(context);
        length += _nameProperty.WriteLength(context);
        length += _colourProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        WriteMetaModel(stream, context);
        
        var writes = false;
        writes |= _nameProperty.Write(stream, context);
        writes |= _colourProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case MetaModel.ReservedPropertyID: {
                    ReadMetaModel(stream, context);
                    break;
                }
                case (uint) PropertyID.Name: {
                    changed = _nameProperty.Read(stream, context);
                    if (changed) FireNameDidChange(name);
                    break;
                }
                case (uint) PropertyID.Colour: {
                    changed = _colourProperty.Read(stream, context);
                    if (changed) FireColourDidChange(colour);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _name = name;
        Color parsedColour;
        if(ColorUtility.TryParseHtmlString(colour, out parsedColour))
        {
            _colour = parsedColour;
        }
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
