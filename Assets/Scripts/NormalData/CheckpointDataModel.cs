using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;
[RealtimeModel(true)]
public partial class CheckpointDataModel
{
    [RealtimeProperty(1, true, true)]
    private bool _justReached;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class CheckpointDataModel : RealtimeModel {
    public bool justReached {
        get {
            return _justReachedProperty.value;
        }
        set {
            if (_justReachedProperty.value == value) return;
            _justReachedProperty.value = value;
            InvalidateReliableLength();
            FireJustReachedDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(CheckpointDataModel model, T value);
    public event PropertyChangedHandler<bool> justReachedDidChange;
    
    public enum PropertyID : uint {
        JustReached = 1,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _justReachedProperty;
    
    #endregion
    
    public CheckpointDataModel() : base(new MetaModel()) {
        _justReachedProperty = new ReliableProperty<bool>(1, _justReached);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _justReachedProperty.UnsubscribeCallback();
    }
    
    private void FireJustReachedDidChange(bool value) {
        try {
            justReachedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = MetaModelWriteLength(context);
        length += _justReachedProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        WriteMetaModel(stream, context);
        
        var writes = false;
        writes |= _justReachedProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case MetaModel.ReservedPropertyID: {
                    ReadMetaModel(stream, context);
                    break;
                }
                case (uint) PropertyID.JustReached: {
                    changed = _justReachedProperty.Read(stream, context);
                    if (changed) FireJustReachedDidChange(justReached);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _justReached = justReached;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
